// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using NBB.Payments.Data;
using System;

namespace NBB.Payments.Migrations.Migrations
{
    [DbContext(typeof(PaymentsDbContext))]
    partial class PaymentsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("NBB.Payments.Domain.PayableAggregate.Payable", b =>
                {
                    b.Property<Guid>("PayableId")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount");

                    b.Property<Guid>("ClientId");

                    b.Property<Guid?>("InvoiceId");

                    b.Property<Guid?>("ContractId");

                    b.Property<int>("Version");

                    b.HasKey("PayableId");

                    b.ToTable("Payables");
                });

            modelBuilder.Entity("NBB.Payments.Domain.PayableAggregate.Payment", b =>
                {
                    b.Property<Guid>("PaymentId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("PayableId");

                    b.Property<DateTime>("PaymentDate");

                    b.HasKey("PaymentId");

                    b.HasIndex("PayableId")
                        .IsUnique();

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("NBB.Payments.Domain.PayableAggregate.Payment", b =>
                {
                    b.HasOne("NBB.Payments.Domain.PayableAggregate.Payable")
                        .WithOne("Payment")
                        .HasForeignKey("NBB.Payments.Domain.PayableAggregate.Payment", "PayableId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
